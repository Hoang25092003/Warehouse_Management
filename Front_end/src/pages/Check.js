import React, { useState, useEffect } from "react";
import { Button, Row, Col, Form, Modal, Spinner } from "react-bootstrap";
import { ToastContainer, toast } from "react-toastify";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faExclamationTriangle, faClipboardList } from "@fortawesome/free-solid-svg-icons";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import moment from "moment";

function Check() {
  const [loading, setLoading] = useState(true);
  const [showModal, setShowModal] = useState(false);
  const [isNewProduct, setIsNewProduct] = useState(false);
  const [searchResults, setSearchResults] = useState([]);
  const [warehouses, setWarehouses] = useState([]);
  const [warehouse_id_data, setWarehouse_id_data] = useState([]);
  const [quantity_in_stock, setQuantity_in_stock] = useState([]);
  const [selectedWarehouseQuantity, setSelectedWarehouseQuantity] = useState(0);
  const [product_status, setProductStatus] = useState("");
  const [checked, setChecked] = useState(false);
  const [queueBarcode, setQueueBarcode] = useState([]);
  const [showQueue, setShowQueue] = useState(false);
  const navigate = useNavigate();
  let warehouse_data = [];
  let warehouse_id_data_received = [];
  let quantity_in_stock_received = [];

  useEffect(() => {
    // G·ªçi API ƒë·ªÉ l·∫•y danh s√°ch nh√† kho, nh√† cung c·∫•p, danh m·ª•c t·ª´ CSDL ƒë·ªÉ hi·ªÉn th·ªã ·ªü c√°c selectbox
    const fetchDataSelectBox = async () => {
      try {
        const warehousesRes = await axios.get(`${process.env.REACT_APP_API_URL}/api/warehouses`, { 
          withCredentials: true,
         });

        setWarehouses(warehousesRes.data);
      } catch (error) {
        toast.error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu t·ª´ server!");
      }finally {
        setLoading(false);
      }
    };
    fetchDataSelectBox();

    let intervalId;
    const startListening = () => {
      intervalId = setInterval(async () => {
        try {
          warehouse_data = [];
          warehouse_id_data_received = [];
          quantity_in_stock_received = [];
          // G·ª≠i y√™u c·∫ßu ƒë·∫øn API ƒë·ªÉ qu√©t m√£ v·∫°ch
          const response = await axios.get(`${process.env.REACT_APP_API_URL}/api/check_barcode_fetch`, { 
            withCredentials: true,
           });
          if (response.data.success) {
            if (response.data.find) {
              const received_product = response.data.product;
              warehouse_data = JSON.parse(received_product.warehouse_data);
              for (const data of warehouse_data) {
                warehouse_id_data_received.push(data.warehouse_id);
                quantity_in_stock_received.push(data.quantity);
              }

              checkProductStatus(received_product);
              setWarehouse_id_data(warehouse_id_data_received);
              setQuantity_in_stock(quantity_in_stock_received);
              if(!searchResults){
                setSearchResults(received_product);
                toast.success("T√¨m th·∫•y s·∫£n ph·∫©m trong kho h√†ng.");
              }else{
                setQueueBarcode(received_product);
                toast.info("M·ªôt s·∫£n ph·∫©m ƒë∆∞·ª£c th√™m v√†o h√†ng ch·ªù")
              }
              setChecked(true);
              setIsNewProduct(false);
            } else if (!response.data.find) {
              setIsNewProduct(true); //Show modal
              setChecked(false);
            }
          }
        } catch (error) {
          console.error("L·ªói khi qu√©t m√£ v·∫°ch:", error);
          toast.error("ƒê√£ x·∫£y ra l·ªói khi qu√©t m√£ v·∫°ch.");
          // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói chi ti·∫øt
          if (error.response) {
            // L·ªói t·ª´ ph√≠a server
            console.log(`L·ªói server: ${error.response.status} - ${error.response.data.message || "Kh√¥ng x√°c ƒë·ªãnh"}`);
          } else if (error.request) {
            // Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ server
            console.log("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.");
          } else {
            // L·ªói kh√°c
            console.log(`ƒê√£ x·∫£y ra l·ªói: ${error.message}`);
          }
        }
      }, 500);
    };

    startListening();
    // D·ªçn d·∫πp khi component b·ªã unmount
    return () => clearInterval(intervalId);

  }, [searchResults]);

  const checkProductStatus = (product) => {
    const currentDate = moment();
    const expirationDate = moment(product.expiration_date);

    // Ki·ªÉm tra s·ªë l∆∞·ª£ng
    if (product.product_quantity < 10) {
      setProductStatus("S·∫Øp h·∫øt h√†ng üü°");
      return;
    } else if (product.product_quantity === 0) {
      setProductStatus("H·∫øt h√†ng üî¥");
    }

    // Ki·ªÉm tra h·∫°n s·ª≠ d·ª•ng
    if (expirationDate.diff(currentDate, "days") < 7 && expirationDate.isAfter(currentDate)) {
      setProductStatus("S·∫Øp h·∫øt h·∫°n üü†");
      return;
    } else if (expirationDate.isBefore(currentDate)) {
      setProductStatus("Qu√° h·∫°n ‚ö´");
      return;
    }
    setProductStatus("B√¨nh th∆∞·ªùng üü¢");
  };

  if (loading) {
    return (
      <div className="d-flex justify-content-center align-items-center" style={{ height: '80vh' }}>
        <Spinner animation="border" role="status">
          <span className="visually-hidden">Loading...</span>
        </Spinner>
      </div>
    );
  }

  return (
    <div className="container mt-4">
      <ToastContainer />
      {/* Header Section */}
      <div className="d-flex justify-content-between align-items-center mb-4">
        {/* Header Title */}
        <h1 className="text-center flex-grow-1 mb-0">Ki·ªÉm H√†ng</h1>

        {/* Queue Button */}
        <div className="position-relative">
          <Button variant={queueBarcode.length > 0 ? "success" : "secondary"}
            className="position-relative"
            onClick={() => setShowQueue(!showQueue)}>
            <FontAwesomeIcon icon={faClipboardList} className="me-2" />
            H√†ng ch·ªù
            {queueBarcode.length > 0 && (
              <span
                className="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger"
                style={{ fontSize: "0.8rem" }}
              >
                {queueBarcode.length}
              </span>
            )}
          </Button>

          {/* Dropdown H√†ng ch·ªù */}
          {showQueue && (
            <div
              className="position-absolute end-0 mt-2 bg-white border shadow p-3"
              style={{
                width: "300px",
                maxHeight: "200px",
                overflowY: "auto",
                zIndex: 1050,
              }}
            >
              {queueBarcode.length === 0 ? (
                <p className="text-muted text-center">Kh√¥ng c√≥ g√¨ trong h√†ng ch·ªù</p>
              ) : (
                <ul className="list-group">
                  {queueBarcode.map((item, index) => (
                    <li
                      key={index}
                      className="list-group-item"
                      style={{ cursor: "pointer" }}
                      onClick={() => {
                        setSearchResults(item);
                        setQueueBarcode((prevProducts) =>
                          prevProducts.filter((product) => product.barcode !== item.barcode)
                        );
                        setShowQueue(false);
                        toast.info("Vui l√≤ng ki·ªÉm tra th√¥ng tin.")
                      }}
                    >
                      <strong>T√™n:</strong> {item.name}
                      <br />
                      <strong>M√£ v·∫°ch:</strong> {item.barcode}
                    </li>
                  ))}
                </ul>
              )}
            </div>
          )}
        </div>
      </div>


      {/* Product List */}
      <div className="card p-4 shadow-sm">
        <Row className="mb-3">
          <h2 className="mb-3 text-primary text-center">{searchResults?.product_name || "Ch∆∞a c√≥ th√¥ng tin"}</h2>
        </Row>
        <Form>
          <Row className="mb-3">
            <Col md={4}>
              <Form.Group className="mb-3">
                <Form.Label>M√£ v·∫°ch</Form.Label>
                <Form.Control
                  type="text"
                  placeholder="M√£ v·∫°ch s·∫£n ph·∫©m"
                  value={searchResults?.barcode || ""}
                  readOnly
                />
              </Form.Group>
            </Col>
            <Col md={4}>
              <Form.Group className="mb-3">
                <Form.Label>Danh m·ª•c</Form.Label>
                <Form.Control
                  type="text"
                  placeholder="Danh m·ª•c s·∫£n ph·∫©m"
                  value={searchResults?.product_category || ""}
                  readOnly
                />
              </Form.Group>
            </Col>
            <Col md={4}>
              <Form.Group className="mb-3">
                <Form.Label>ƒê∆°n gi√°</Form.Label>
                <Form.Control
                  type="text"
                  placeholder="Gi√° s·∫£n ph·∫©m"
                  value={searchResults?.product_unit_price || ""}
                  readOnly
                />
              </Form.Group>
            </Col>
          </Row>
          <Row className="mb-3">
            <Col md={4}>
              <Form.Group className="mb-3">
                <Form.Label>Ng√†y s·∫£n xu·∫•t</Form.Label>
                <Form.Control
                  type="date"
                  value={searchResults.production_date?.split("T")[0] || ""}
                  readOnly
                />
              </Form.Group>
            </Col>
            <Col md={4}>
              <Form.Group className="mb-3">
                <Form.Label>Ng√†y h·∫øt h·∫°n</Form.Label>
                <Form.Control
                  type="date"
                  value={searchResults.expiration_date?.split("T")[0] || ""}
                  readOnly
                />
              </Form.Group>
            </Col>
            <Col md={4}>
              <Form.Group className="mb-3">
                <Form.Label>T√¨nh tr·∫°ng</Form.Label>
                <Form.Control
                  type="text"
                  placeholder="T√¨nh tr·∫°ng s·∫£n ph·∫©m"
                  value={product_status || ""}
                  readOnly
                />
              </Form.Group>
            </Col>
          </Row>
          <Row className="mb-3">
            <Col md={4}>
              <Form.Group className="mb-3">
                <Form.Label>Nh√† cung c·∫•p</Form.Label>
                <Form.Control
                  type="text"
                  placeholder="Nh√† cung c·∫•p"
                  value={searchResults.supplier_name || ""}
                  readOnly
                />
              </Form.Group>
            </Col>
            <Col md={4}>
              <Form.Group className="mb-3">
                <Form.Label>Kho h√†ng</Form.Label>
                <Form.Select
                  onChange={(e) => {
                    const selectedWarehouseId = e.target.value;
                    const index = warehouse_id_data.indexOf(selectedWarehouseId);
                    const quantity = index >= 0 ? quantity_in_stock[index] : 0;
                    setSelectedWarehouseQuantity(quantity);
                  }}
                >
                  <option value="">Ch·ªçn nh√† kho</option>
                  {warehouses.map((warehouse) => (
                    <option key={warehouse.warehouse_id} value={warehouse.warehouse_id}>
                      {warehouse.name}
                    </option>
                  ))}
                </Form.Select>
              </Form.Group>
            </Col>
            <Col md={4}>
              <Form.Group className="mb-3">
                <Form.Label>S·ªë l∆∞·ª£ng trong kho</Form.Label>
                <Form.Control
                  type="text"
                  value={selectedWarehouseQuantity}
                  readOnly
                />
              </Form.Group>
            </Col>
          </Row>
        </Form>
        <div className="d-flex justify-content-end mt-4">
          <Button className="me-2" variant="primary"
            onClick={() => {
              setSearchResults([]);
              setChecked(false);
            }}>
            L√†m m·ªõi
          </Button>
          <Button variant="danger"
            onClick={() => {
              if (checked) {
                setShowModal(true);
              }
            }}>
            S·ª≠a th√¥ng tin
          </Button>
        </div>
      </div>
      {/* X√°c nh·∫≠n h√†ng m·ªõi */}
      <Modal show={isNewProduct} onHide={() => setIsNewProduct(false)} centered>
        <Modal.Header>
          <Modal.Title>Th√¥ng b√°o <FontAwesomeIcon icon={faExclamationTriangle} className="me-2" /></Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form.Group>
            <Form.Label className="d-block text-center p-3 rounded text-primary">
              <strong>S·∫£n ph·∫©m ch∆∞a t·ªìn t·∫°i trong kho</strong>.
              <br />
              B·∫°n mu·ªën th√™m s·∫£n ph·∫©m v√†o kho?
              <br />
              <span className="text-muted">Nh·∫•n x√°c nh·∫≠n ƒë·ªÉ chuy·ªÉn qua trang nh·∫≠p h√†ng!</span>
            </Form.Label>
          </Form.Group>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setIsNewProduct(false)}>H·ªßy</Button>
          <Button
            variant="primary"
            onClick={() => {
              setIsNewProduct(false);
              navigate('/import');
            }}
          >
            X√°c nh·∫≠n
          </Button>
        </Modal.Footer>
      </Modal>
      {/* X√°c nh·∫≠n s·ª≠a th√¥ng tin */}
      <Modal show={showModal} onHide={() => setShowModal(false)} centered size="lg">
        <Modal.Header
          closeButton
          style={{
            backgroundColor: "#f8f9fa",
            borderBottom: "1px solid #dee2e6",
          }}
        >
          <Modal.Title className="d-flex align-items-center">
            <FontAwesomeIcon
              icon={faExclamationTriangle}
              className="me-2 text-warning"
              style={{ fontSize: "1.5rem" }}
            />
            <span style={{ fontWeight: "bold" }}>Th√¥ng b√°o</span>
          </Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <div
            style={{
              textAlign: "center",
              padding: "20px",
              backgroundColor: "#fff3cd",
              borderRadius: "8px",
              border: "1px solid #ffeeba",
            }}
          >
            <p
              style={{
                fontSize: "1.2rem",
                fontWeight: "600",
                color: "#856404",
              }}
            >
              B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën s·ª≠a th√¥ng tin s·∫£n ph·∫©m kh√¥ng?
            </p>
            <p
              style={{
                fontSize: "1rem",
                color: "#6c757d",
                marginBottom: "10px",
              }}
            >
              Nh·∫•n x√°c nh·∫≠n ƒë·ªÉ chuy·ªÉn qua trang qu·∫£n l√Ω s·∫£n ph·∫©m!
            </p>
          </div>
        </Modal.Body>
        <Modal.Footer
          style={{
            backgroundColor: "#f8f9fa",
            borderTop: "1px solid #dee2e6",
          }}
        >
          <Button
            variant="outline-secondary"
            onClick={() => setShowModal(false)}
            style={{
              borderRadius: "20px",
              padding: "10px 20px",
              fontWeight: "bold",
            }}
          >
            H·ªßy
          </Button>
          <Button
            variant="success"
            onClick={() => {
              setIsNewProduct(false);
              navigate("/products");
            }}
            style={{
              borderRadius: "20px",
              padding: "10px 20px",
              fontWeight: "bold",
            }}
          >
            X√°c nh·∫≠n
          </Button>
        </Modal.Footer>
      </Modal>

    </div>
  );
}

export default Check;
