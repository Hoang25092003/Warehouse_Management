import React, { useState, useEffect } from "react";
import { Table, Button, Form, Row, Col, Spinner, Alert } from "react-bootstrap";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faFileExcel } from "@fortawesome/free-solid-svg-icons";
import * as XLSX from "xlsx";
import axios from "axios";
import "react-datepicker/dist/react-datepicker.css";

function Reports() {
  const [reportType, setReportType] = useState("");
  const [reportData, setReportData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [savedReports, setSavedReports] = useState([]);
  const [showReport, setShowReport] = useState(false);
  const [isGenerated, setIsGenerated] = useState(false);


  // L·∫•y danh s√°ch b√°o c√°o ƒë√£ l∆∞u
  const fetchSavedReports = async () => {
    try {
      const token = localStorage.getItem('token');
      const response = await axios.get('http://localhost:3000/api/savedreports', {
        headers: {
          Authorization: `Bearer ${token}`
        }
      });
      setSavedReports(response.data);
    } catch (err) {
      console.error("L·ªói khi l·∫•y danh s√°ch b√°o c√°o:", err);
    }
  };
  useEffect(() => {
    fetchSavedReports();
    setIsGenerated(false); // cho ph√©p t·∫°o l·∫°i khi thay ƒë·ªïi lo·∫°i b√°o c√°o
    setShowReport(false);  // ·∫©n b·∫£ng c≈© khi ch·ªçn lo·∫°i m·ªõi
  }, []);

  const generateReport = async () => {
    if (!reportType) {
      setError("Vui l√≤ng ch·ªçn lo·∫°i b√°o c√°o");
      return;
    }

    setShowReport(false);
    setLoading(true);
    setError(null);
    setReportData(null);
    try {
      let endpoint = '';
      switch (reportType) {
        case 'import':
          endpoint = 'http://localhost:3000/api/reports/imports';
          break;
        case 'export':
          endpoint = 'http://localhost:3000/api/reports/exports';
          break;
        case 'inventory':
          endpoint = 'http://localhost:3000/api/reports/inventory';
          break;
        default:
          setError("Lo·∫°i b√°o c√°o kh√¥ng h·ª£p l·ªá");
          return;
      }

      const token = localStorage.getItem('token');
      const response = await axios.get(endpoint, {
        headers: {
          Authorization: `Bearer ${token}`
        }
      });

      setReportData(response.data);

      // L∆∞u b√°o c√°o v√†o database
      const payload = token.split('.')[1];
      const decodedPayload = atob(payload);
      const userData = JSON.parse(decodedPayload);

      const now = new Date();
      const month = now.getMonth() + 1;
      const year = now.getFullYear();

      let reportLabel = '';
      switch (reportType) {
        case 'import': reportLabel = 'nh·∫≠p h√†ng'; break;
        case 'export': reportLabel = 'xu·∫•t h√†ng'; break;
        case 'inventory': reportLabel = 't·ªìn kho'; break;
        default: reportLabel = 'b√°o c√°o'; break;
      }

      const reportContent = `B√°o c√°o ${reportLabel} th√°ng ${month}/${year}`;


      await axios.post('http://localhost:3000/api/reports', {
        report_type: reportType,
        user_id: userData.user_id,
        content: reportContent
      }, {
        headers: {
          Authorization: `Bearer ${token}`
        }
      });

      console.log("UserID:", userData.user_id);
      console.log("D·ªØ li·ªáu b√°o c√°o:", response.data);


      // C·∫≠p nh·∫≠t danh s√°ch b√°o c√°o ƒë√£ l∆∞u
      fetchSavedReports();

      setShowReport(true);
      setIsGenerated(true);
    } catch (err) {
      setError(err.response?.data?.error || err.message);
    } finally {
      setLoading(false);
    }
  };

  const exportToExcel = () => {
    if (!reportData) return;

    const worksheet = XLSX.utils.json_to_sheet(reportData);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "B√°o c√°o");

    // T·∫°o t√™n file d·ª±a tr√™n lo·∫°i b√°o c√°o v√† ng√†y
    const dateStr = new Date().toISOString().slice(0, 10);
    let fileName = `BaoCao_${reportType}_${dateStr}.xlsx`;

    XLSX.writeFile(workbook, fileName);
  };

  const renderReportTable = () => {
    if (!reportData) return null;

    switch (reportType) {
      case 'import':
        return (
          <Table striped bordered hover responsive className="mt-3">
            <thead className="table-dark">
              <tr>
                <th>M√£ nh·∫≠p</th>
                <th>S·∫£n ph·∫©m</th>
                <th>Kho</th>
                <th>S·ªë l∆∞·ª£ng</th>
                <th>ƒê∆°n gi√°</th>
                <th>Th√†nh ti·ªÅn</th>
                <th>Ng√†y nh·∫≠p</th>
                <th>Nh√† cung c·∫•p</th>
              </tr>
            </thead>
            <tbody>
              {reportData.map((item) => (
                <tr key={item.import_id}>
                  <td>{item.import_id}</td>
                  <td>{item.product_name}</td>
                  <td>{item.warehouse_name}</td>
                  <td>{item.quantity}</td>
                  <td>{item.unit_price.toLocaleString()}</td>
                  <td>{item.total_value.toLocaleString()}</td>
                  <td>{new Date(item.import_date).toLocaleDateString('vi-VN')}</td>
                  <td>{item.supplier_name || 'N/A'}</td>
                </tr>
              ))}
            </tbody>
          </Table>
        );

      case 'export':
        return (
          <Table striped bordered hover responsive className="mt-3">
            <thead className="table-dark">
              <tr>
                <th>M√£ xu·∫•t</th>
                <th>S·∫£n ph·∫©m</th>
                <th>Kho</th>
                <th>S·ªë l∆∞·ª£ng</th>
                <th>ƒê∆°n gi√°</th>
                <th>Th√†nh ti·ªÅn</th>
                <th>Ng√†y xu·∫•t</th>
                <th>Th√¥ng tin KH</th>
              </tr>
            </thead>
            <tbody>
              {reportData.map((item) => (
                <tr key={item.export_id}>
                  <td>{item.export_id}</td>
                  <td>{item.product_name}</td>
                  <td>{item.warehouse_name}</td>
                  <td>{item.quantity}</td>
                  <td>{item.unit_price.toLocaleString()}</td>
                  <td>{item.total_value.toLocaleString()}</td>
                  <td>{new Date(item.export_date).toLocaleDateString('vi-VN')}</td>
                  <td>{item.customer_info || 'N/A'}</td>
                </tr>
              ))}
            </tbody>
          </Table>
        );

      case 'inventory':
        return (
          <Table striped bordered hover responsive className="mt-3">
            <thead className="table-dark">
              <tr>
                <th>S·∫£n ph·∫©m</th>
                <th>Danh m·ª•c</th>
                <th>Kho</th>
                <th>S·ªë l∆∞·ª£ng t·ªìn</th>
                <th>ƒê∆°n gi√°</th>
                <th>T·ªïng gi√° tr·ªã</th>
                <th>HSD c√≤n l·∫°i</th>
              </tr>
            </thead>
            <tbody>
              {reportData.map((item) => {
                const expirationDate = new Date(item.expiration_date);
                const today = new Date();
                const diffTime = expirationDate - today;
                const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

                return (
                  <tr key={`${item.product_id}_${item.warehouse_id}`}>
                    <td>{item.product_name}</td>
                    <td>{item.category_name}</td>
                    <td>{item.warehouse_name}</td>
                    <td>{item.stock_quantity}</td>
                    <td>{item.unit_price.toLocaleString()}</td>
                    <td>{(item.unit_price * item.stock_quantity).toLocaleString()}</td>
                    <td className={diffDays < 30 ? 'text-danger' : ''}>
                      {diffDays > 0 ? `${diffDays} ng√†y` : 'ƒê√£ h·∫øt h·∫°n'}
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </Table>
        );
        default:
        return null;
    }
  };

  return (
    <div className="container mt-4">
      <h1 className="text-center mb-4">üìä Qu·∫£n L√Ω B√°o C√°o</h1>

      {error && <Alert variant="danger">{error}</Alert>}

      <div className="card mb-4">
        <div className="card-header">
          <h5>T·∫°o b√°o c√°o m·ªõi</h5>
        </div>
        <div className="card-body">
          <Row>
            <Col md={4}>
              <Form.Group controlId="reportType">
                <Form.Label>Lo·∫°i b√°o c√°o</Form.Label>
                <Form.Control
                  as="select"
                  value={reportType}
                  onChange={(e) => {
                    setReportType(e.target.value)
                    setShowReport(false);
                    setIsGenerated(false);
                  }}
                >
                  <option value="">-- Ch·ªçn lo·∫°i --</option>
                  <option value="import">B√°o c√°o nh·∫≠p h√†ng</option>
                  <option value="export">B√°o c√°o xu·∫•t h√†ng</option>
                  <option value="inventory">B√°o c√°o t·ªìn kho</option>
                </Form.Control>
              </Form.Group>
            </Col>
            <Col md={2} className="d-flex align-items-end">
              <Button
                variant="primary"
                onClick={generateReport}
                disabled={isGenerated || !reportType}
              >
                {loading ? (
                  <>
                    <Spinner animation="border" size="sm" /> ƒêang t·∫°o...
                  </>
                ) : (
                  'T·∫°o b√°o c√°o'
                )}
              </Button>
            </Col>
          </Row>
        </div>
      </div>

      {showReport && reportData && (
        <div className="card mb-4">
          <div className="card-header d-flex justify-content-between align-items-center">
            <h5>K·∫øt qu·∫£ b√°o c√°o</h5>
            <Button variant="success" onClick={exportToExcel}>
              <FontAwesomeIcon icon={faFileExcel} className="me-2" />
              Xu·∫•t Excel
            </Button>
          </div>
          <div key={reportType} className="card-body">
            {renderReportTable()}
          </div>
        </div>
      )}

      <div className="card">
        <div className="card-header">
          <h5>L·ªãch s·ª≠ b√°o c√°o</h5>
        </div>
        <div className="card-body">
          <Table striped bordered hover>
            <thead>
              <tr>
                <th>M√£ b√°o c√°o</th>
                <th>Lo·∫°i b√°o c√°o</th>
                <th>Ng√†y t·∫°o</th>
                <th>Ng∆∞·ªùi t·∫°o</th>
                <th>Ghi Ch√∫</th>
              </tr>
            </thead>
            <tbody>
              {savedReports.map((report) => (
                <tr key={report.report_id}>
                  <td>{report.report_id}</td>
                  <td>
                    {report.report_type === 'import' && 'Nh·∫≠p h√†ng'}
                    {report.report_type === 'export' && 'Xu·∫•t h√†ng'}
                    {report.report_type === 'inventory' && 'T·ªìn kho'}
                  </td>
                  <td>{new Date(report.generated_date).toLocaleString('vi-VN')}</td>
                  <td>{report.user_name}</td>
                  <td>
                    {report.content}
                  </td>
                </tr>
              ))}
            </tbody>
          </Table>
        </div>
      </div>
    </div>
  );
}

export default Reports;